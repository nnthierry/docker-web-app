name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: flask-app
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydatabase
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask

    - name: Run tests
      run: |
        python -c "
        from app import create_app, db
        import os
        app = create_app()
        app.config['TESTING'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:password@localhost:5432/mydatabase'
        with app.app_context():
            db.create_all()
            print('Database setup completed successfully!')
        "
      env:
        FLASK_APP: run.py

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up Minikube
      uses: manusa/actions-setup-minikube@v2
      with:
        minikube version: 'v1.32.0'
        kubernetes version: 'v1.28.0'
        start args: '--driver=docker'

    - name: Deploy to Kubernetes
      run: |
        # Update image in deployment
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/deployment.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/flask-app --timeout=300s
        
        # Get service info
        kubectl get services

    - name: Verify deployment
      run: |
        # Wait for pod to be ready
        kubectl wait --for=condition=ready pod -l app=flask-app --timeout=300s
        
        # Port forward to test
        kubectl port-forward service/flask-service 8080:80 &
        sleep 10
        
        # Test the application
        curl -f http://localhost:8080/health || exit 1
